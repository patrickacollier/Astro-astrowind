---
import { Image } from 'astro:assets';
import Button from '~/components/ui/Button.astro';
import Background from '~/components/ui/Background.astro';
import defaultHeroImage from '~/assets/images/hero-main.jpg';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative h-screen flex items-center justify-center overflow-hidden" {...id ? { id } : {}}>
  <div class="absolute inset-0 z-0">
    {
      image ? (
        typeof image === 'string' ? (
          <Fragment set:html={image} />
        ) : (
          <Image
            src={image.src || defaultHeroImage}
            alt={image.alt || "Hero image"}
            class="w-full h-full object-cover"
            widths={[400, 768, 1024, 2040]}
            sizes="100vw"
            loading="eager"
          />
        )
      ) : (
        <Image
          src={defaultHeroImage}
          alt="Twin Oaks Fun Farm"
          class="w-full h-full object-cover"
          widths={[400, 768, 1024, 2040]}
          sizes="100vw"
          loading="eager"
        />
      )
    }
    <div class="absolute inset-0 bg-black opacity-50"></div>
  </div>

  <div class="relative z-10 text-center text-white max-w-5xl mx-auto px-4 sm:px-6">
    {tagline && <p class="text-base text-blue-200 font-bold tracking-wide uppercase mb-4" set:html={tagline} />}
    {title && <h1 class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading" set:html={title} />}
    {subtitle && <p class="text-xl text-slate-300 mb-6" set:html={subtitle} />}
    
    {
      actions && (
        <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
          {Array.isArray(actions) ? (
            actions.map((action) => (
              <div class="flex w-full sm:w-auto">
                <Button {...(action || {})} class="w-full sm:mb-0" />
              </div>
            ))
          ) : (
            <Fragment set:html={actions} />
          )}
        </div>
      )
    }
    
    {content && <Fragment set:html={content} />}
  </div>
</section>